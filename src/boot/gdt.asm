; Определяем GDT (глобальная таблица дескрипторов)
; ------------------------------------------------------------------------------
; 	Способ, которым процессор переводит логический адрес в физический, в
; 	32-битном защищенном режиме отличается от 16-битного реального режима.
; 	Вместо того, чтобы умножить значение регистра сегмента на 16 и прибавить к
; 	этому "смещение" (offset), регистр сегмента становится индексом
; 	определенного дескриптора сегмента в GDT.
; 	Дескриптор сегмента - это 8-битная структура, которая определяет свойства
; 	этого сегмента:
; 		- Base address (32 bits), определяющий откуда сегмент начинается в
; 		физической памяти.
; 		- Segment Limit (20 bits), определяющий размер сегмента
;		- Различные флаги, которые устанавливают каким образом процессор будет
; 		"относиться" к сегментам, например уровень привилегий и т.д.
;
; 	Флаги:
;	* 1-ые флаги:
; 		- present flag (флаг присутствия). Если его значение "1", то это
;		указывает, что сегмент присутствует в памяти (это нужно для виртуальной
;		памяти)
;		- privilege flag (флаг привилегии). Значение "0" - самый высокий уровень
;		привилегии
;		- descriptor type (тип дескриптора). "1" - для сегмента кода или
;		сегмента данных
; 	* Флаги типа:
;		- code (флаг кода). "1" - для кода, "0" - для даннных
;		- conformig (флаг подчинения). "0" - чтобы код в другом сегменте с
;		более низким уровнем привилегий не смог вызвать код из этого сегмента -
;		это ключ к защите памяти (memory protection).
;		- readable (читаемость). "1" - если читаемый, "0" - только исполняемый.
;		- writable. Разрешает сегменту данных быть записываемым, в противном
;		случае, он будет доступен только для чтения.
;		- accessed (флаг доступа). Этот флаг устанавливается, когда происходит
; 		обращение к сегменту.
;		- expand down. Флаг (бит), позволяющий сегменту расширяться вниз.
;	* 2-ые флаги:
;		- granulariy (гранулярность). "0" - байтовая гранулярность, лимит
; 		задается в байтах, если "1" - страничная гранулярность, в 4кб блоках.
;		Если выбрать страничную гранулярность и установить значение лимита как
;		0xfffff, то лимит умножится на 16*16*16 (4кб), и лимит станет 0xfffff000
; 		позволяя нашему сегменту занять 4гб места в памяти.
;		- 32-bit default. "1" - т.к. наш сегмент будет содержать 32-битный код.
;		- 64-bit code segment. "0" - т.к. не используется на 32-битных
;		процессорах.
;		- AVL (available). Определяет доступность сегмента для использования
;		системным программным обеспечением (используются только ОС).
; ------------------------------------------------------------------------------

; Таблица GDT начинается здесь
gdt_start:

; Нулевой дескриптор (обязателен, зарезервирован, не используется)
gdt_null:
	dd 0x0              ; Первые 4 байта дескриптора = 0
	dd 0x0              ; Вторые 4 байта дескриптора = 0

; Дескриптор сегмента кода
gdt_code:
	dw 0xffff           ; Лимит сегмента: младшие 16 бит (0xFFFF)
	dw 0x0              ; Базовый адрес: младшие 16 бит (0x0000)
	db 0x0              ; Базовый адрес: следующий байт (средние 8 бит)
	db 10011010b        ; Флаги доступа:
	                    ; 1 - сегмент присутствует
	                    ; 00 - уровень привилегий 0 (наивысший)
	                    ; 1 - дескриптор сегмента (а не системный)
	                    ; 1 - это кодовый сегмент
	                    ; 0 - non-conforming (требует одинакового уровня привилегий)
	                    ; 1 - доступен для чтения
	                    ; 0 - не использован (должен быть 0)
	db 11001111b        ; Флаги и лимит:
	                    ; 1 - гранулярность (лимит в страницах по 4КБ)
	                    ; 1 - 32-битный сегмент
	                    ; 0 - не 64-битный
	                    ; 0 - системный флаг (AVL), не используется
	                    ; 1111 - старшие 4 бита лимита сегмента (0xF)
	db 0x0              ; Базовый адрес: старшие 8 бит (всего адрес = 0x00000000)

; Дескриптор сегмента данных (аналогичен коду, но с другим флагом доступа)
gdt_data:
	dw 0xffff           ; Лимит сегмента: младшие 16 бит (0xFFFF)
	dw 0x0              ; Базовый адрес: младшие 16 бит (0x0000)
	db 0x0              ; Базовый адрес: средние 8 бит
	db 10010010b        ; Флаги доступа:
	                    ; 1 - сегмент присутствует
	                    ; 00 - уровень привилегий 0
	                    ; 1 - дескриптор сегмента
	                    ; 0 - это сегмент данных
	                    ; 0 - расширение вверх (expand-up)
	                    ; 1 - доступен для записи
	                    ; 0 - не использован
	db 11001111b        ; Флаги и лимит: те же, что у кода (гранулярность, 32-бит)
	db 0x0              ; Базовый адрес: старшие 8 бит

; Метка конца таблицы GDT (для вычисления размера)
gdt_end:

; Дескриптор самой таблицы GDT для передачи в LGDT:
; содержит размер таблицы (в байтах - 1) и адрес начала
gdt_descriptor:
	dw gdt_end - gdt_start - 1  ; Размер GDT - 1 (по спецификации)
	dd gdt_start                ; Линейный адрес начала GDT

; Макросы-офсеты для использования в сегментных регистрах:
; они задают смещение нужного дескриптора от начала таблицы
CODE_SEG equ gdt_code - gdt_start  ; Смещение сегмента кода
DATA_SEG equ gdt_data - gdt_start  ; Смещение сегмента данных

