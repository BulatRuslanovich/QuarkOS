; Код, служащий входной точкой для функции kmain из kernel.c
;------------------------------------------------------------------------------
; Точка входа в ядро после перехода в защищённый 32-битный режим.
; Здесь начинается выполнение кода на уровне ядра ОС.
; ------------------------------------------------------------------------------

[bits 32]          ; Указываем, что последующий код предназначен для 32-битного защищённого режима

[extern kmain]     ; Объявляем внешнюю функцию (из kernel.c), которую будем вызывать
                   ; Компилятор C скомпилирует kmain как символ, доступный извне

call kmain         ; Вызываем функцию kmain
                   ; Здесь фактически передаётся управление ядру, написанному на C

jmp $              ; Бесконечный цикл: остаёмся здесь после завершения kmain
                   ; Символ "$" означает текущий адрес, то есть jmp $ — это "прыжок на самого себя"
                   ; Нужно для предотвращения "проваливания" в непредсказуемую область памяти,
                   ; если kmain вдруг вернётся (что не предполагается)
