;Функция вывода строки на экран в 32-битном защищенном режиме
; ------------------------------------------------------------------------------
; Description:
;	Плюсы 32-битного режима: возможность использовать 32-битные регистры и
;	адрессацию памяти, защищенную память виртуальную память
;	Минусы: отсутствие БИОС прерываний, требование наличия GDT (об этом позже)
;	В этой программе мы напишем новую функцию печати строки, но без прерываний
;	БИОСа, а напрямую манипулируя VGA видеопамятью, вместо вызова int 0x10.
;	VGA память размещена начиная с адреса 0xb8000, и у VGA имеется специальный
;	текстовый режим, поэтому нам не придется напрямую рисовать пиксели.
;	Особенности:
;	1. Символ представляется в виде 2-х байтов. Первый байт - сам символ,
;	второй байт - 4 бита на цвет текста и еще 4 на цвет фона.
;	Например, чтобы распечатать символ 'A' белым текстом на черном фоне, мы
;	испольузуем 0x410f: 0x41 == 'A', 0 == белый, f == черный.
;
;		Bit:     | 15 14 13 12 11 10 9 8 | 7 6 5 4 | 3 2 1 0 |
;		Content: | ASCII                 | FG      | BG      |
;
; ------------------------------------------------------------------------------


[bits 32]  ; Указываем, что этот код работает в 32-битном защищённом режиме

; Определяем адрес видеопамяти и атрибут цвета
VIDEO_MEMORY     equ 0xb8000       ; Адрес начала текстового видеобуфера (режим VGA, 80x25)
GREEN_ON_BLACK   equ 0x0f          ; Атрибут цвета: светло-зелёный текст на чёрном фоне

; ------------------------------------------------------------------------------
; Функция: print_string_pm
; Описание: Выводит строку на экран в режиме protected mode.
; Вход:
;  EBX — указатель на строку (нуль-терминированная)
; ------------------------------------------------------------------------------
print_string_pm:
	pusha                   ; Сохраняем все 32-битные регистры

	mov edx, VIDEO_MEMORY   ; Устанавливаем EDX как указатель на видеопамять

print_string_pm_loop:
	mov al, [ebx]           ; Загружаем очередной символ строки в AL
	mov ah, GREEN_ON_BLACK  ; Устанавливаем цвет символа (в AH)

	cmp al, 0               ; Проверка: достигнут конец строки?
	je print_string_pm_done ; Если символ равен 0 (null-terminator), завершаем вывод

	mov [edx], ax           ; Записываем символ и его цвет в видеопамять
	                        ; AX = [AH:AL] => [атрибут : символ]
	                        ; Один символ в видеопамяти занимает 2 байта

	add ebx, 1              ; Переходим к следующему символу строки
	add edx, 2              ; Смещаем указатель в видеопамяти на следующий символ (2 байта на символ)

	jmp print_string_pm_loop ; Повторяем цикл

print_string_pm_done:
	popa                    ; Восстанавливаем регистры
	ret                     ; Возврат из функции
